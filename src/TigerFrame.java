/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.*;
import java.io.*;
import java.text.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;

/**
 *
 * @author kogayou
 */

public class TigerFrame extends javax.swing.JFrame {

    File file;
    String program;
    GUIPrintStream gps;
    StyledDocument document;
    SimpleAttributeSet normalAttr;
    SimpleAttributeSet errorAttr;
    int errorLine,errorStart,errorEnd;
    boolean errorMarked;
    
    /**
     * Creates new form TigerFrame
     */
    public TigerFrame() {
        initComponents();
        file=null;
        program="";
        gps=new GUIPrintStream(System.err,msgTextArea);
        System.setErr(gps);
        normalAttr=new SimpleAttributeSet();
        errorAttr=new SimpleAttributeSet();
        StyleConstants.setForeground(normalAttr, Color.black);
        StyleConstants.setBackground(normalAttr, Color.white);
        StyleConstants.setForeground(errorAttr, Color.white);
        StyleConstants.setBackground(errorAttr, Color.black);
        errorMarked=false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        programScrollPane = new javax.swing.JScrollPane();
        programTextPane = new javax.swing.JTextPane();
        msgScrollPane = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        analyzeItem = new javax.swing.JMenuItem();
        generateItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tiger Compiler");

        programTextPane.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        programTextPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                programTextPaneFocusGained(evt);
            }
        });
        programScrollPane.setViewportView(programTextPane);

        msgTextArea.setEditable(false);
        msgTextArea.setColumns(20);
        msgTextArea.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        msgTextArea.setForeground(new java.awt.Color(204, 0, 51));
        msgTextArea.setRows(5);
        msgTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                msgTextAreaMouseClicked(evt);
            }
        });
        msgScrollPane.setViewportView(msgTextArea);

        jMenu1.setText("File");

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        jMenu1.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setText("Save As");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compile");

        analyzeItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        analyzeItem.setText("Analyze");
        analyzeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeItemActionPerformed(evt);
            }
        });
        jMenu2.add(analyzeItem);

        generateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        generateItem.setText("Generate AST");
        generateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateItemActionPerformed(evt);
            }
        });
        jMenu2.add(generateItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(programScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(msgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(msgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                    .addComponent(programScrollPane))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        // TODO add your handling code here:
        if (file==null) {
            JFileChooser saveChooser=new JFileChooser();
            saveChooser.showSaveDialog(this);
            File saveFile=saveChooser.getSelectedFile();
            if (saveFile==null) {
                return;
            }
            byte buf[]=programTextPane.getText().getBytes();
            try {
                FileOutputStream fos=new FileOutputStream(saveFile);
                fos.write(buf);
                fos.close();
                file=saveFile;
                program=programTextPane.getText();
                setTitle("Tiger Compiler ("+file.getAbsolutePath()+")");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Save failed.\n"+ex,"Error!",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (errorMarked) {
            document.setCharacterAttributes(0,document.getLength(),normalAttr,true);
            errorMarked=false;
        }
        byte buf[]=programTextPane.getText().getBytes();
        try {
            FileOutputStream fos=new FileOutputStream(file);
            fos.write(buf);
            fos.close();
            program=programTextPane.getText();
            setTitle("Tiger Compiler ("+file.getAbsolutePath()+")");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Save failed.\n"+ex,"Error!",JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_saveItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void analyzeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeItemActionPerformed
        // TODO add your handling code here:
        if (file==null) {
            JOptionPane.showMessageDialog(this,"Please save to a file first.","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!program.equals(programTextPane.getText())) {
            JOptionPane.showMessageDialog(this,"Please save first.","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (errorMarked) {
            document.setCharacterAttributes(0,document.getLength(),normalAttr,true);
            errorMarked=false;
        }
        ANTLRInputStream input=null;
        try {
            input = new ANTLRFileStream(file.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(TigerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TigerLexer lexer=new TigerLexer(input);
        CommonTokenStream tokens=new CommonTokenStream(lexer);
        TigerParser parser=new TigerParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(new CustomListener.UnderlineListener());
        msgTextArea.setText("");
        gps.setToGUI(true);
        msgTextArea.append("Compile \""+file.getAbsolutePath()+"\"\n");
        msgTextArea.append("-----------------------------------------------------------\n");
        msgTextArea.append("Lexical and syntactical analysis started @ "+new SimpleDateFormat("HH:mm:ss").format(new Date())+".\n\n");
        ParseTree tree=parser.prog();
        msgTextArea.append("Lexical and syntactical analysis finished @ "+new SimpleDateFormat("HH:mm:ss").format(new Date())+".\n\nA total of "+CustomListener.UnderlineListener.errorNum+" error(s).\n");
        if (CustomListener.UnderlineListener.errorNum>0) {
            msgTextArea.append("\nAs a result, semantic analysis canceled.\n");
            gps.setToGUI(false);
            return;
        }
        msgTextArea.append("-----------------------------------------------------------\n");
        msgTextArea.append("Semantic analysis started @ "+new SimpleDateFormat("HH:mm:ss").format(new Date())+".\n\n");
        ParseTreeWalker walker=new ParseTreeWalker();
        CustomListener.SemanticListener listener=new CustomListener.SemanticListener(tokens);
        CustomListener.SemanticListener.round=1;
        walker.walk(listener,tree);
        //msgTextArea.append("---round 2---\n");
        CustomListener.SemanticListener.round=2;
        walker.walk(listener,tree);
        msgTextArea.append("Semantic analysis finished @ "+new SimpleDateFormat("HH:mm:ss").format(new Date())+".\n\nA total of "+CustomListener.SemanticListener.errorNum+" error(s).\n"); 
        gps.setToGUI(false);
    }//GEN-LAST:event_analyzeItemActionPerformed

    private void generateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateItemActionPerformed
        // TODO add your handling code here:
        if (file==null) {
            JOptionPane.showMessageDialog(this,"Please save to a file first.","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!program.equals(programTextPane.getText())) {
            JOptionPane.showMessageDialog(this,"Please save first.","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        String args[]={"Tiger","prog","-gui",file.getAbsolutePath()};
        try {
            org.antlr.v4.runtime.misc.TestRig.main(args);
        } catch (Exception ex) {
            Logger.getLogger(TigerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateItemActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        // TODO add your handling code here:
        JFileChooser openChooser=new JFileChooser();
        openChooser.showOpenDialog(this);
        File openFile=openChooser.getSelectedFile();
        if (openFile==null) {
            return;
        }
        if (errorMarked) {
            document.setCharacterAttributes(0,document.getLength(),normalAttr,true);
            errorMarked=false;
        }
        byte buf[]=new byte[(int)openFile.length()];
        try {
            FileInputStream fis=new FileInputStream(openFile);
            fis.read(buf);
            fis.close();
            program=new String(buf);
            programTextPane.setText(program);
            file=openFile;
            setTitle("Tiger Compiler ("+file.getAbsolutePath()+")");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Open failed.\n"+ex,"Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        // TODO add your handling code here:
        JFileChooser saveChooser=new JFileChooser();
        saveChooser.showSaveDialog(this);
        File saveFile=saveChooser.getSelectedFile();
        if (saveFile==null) {
            return;
        }
        byte buf[]=programTextPane.getText().getBytes();
        try {
            FileOutputStream fos=new FileOutputStream(saveFile);
            fos.write(buf);
            fos.close();
            file=saveFile;
            program=programTextPane.getText();
            setTitle("Tiger Compiler ("+file.getAbsolutePath()+")");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Save failed.\n"+ex,"Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void msgTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_msgTextAreaMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()<2||msgTextArea.getLineCount()==0) {
            return;
        }
        try {
            int line=msgTextArea.getLineOfOffset(msgTextArea.getCaretPosition());           
            String msg=msgTextArea.getText().split("\n")[line];
            if (msg.startsWith("line ")) {
                if (errorMarked) {
                    document.setCharacterAttributes(0,document.getLength(),normalAttr,true);
                    errorMarked=false;
                }
                errorLine=Integer.parseInt(msg.split(" |:")[1]);
                JTextArea tmp=new JTextArea();
                String str=programTextPane.getText();
                str=str.replaceAll("\n\r","\n");
                str=str.replaceAll("\r\n","\n");
                tmp.setText(str);
                errorStart=tmp.getLineStartOffset(errorLine-1);
                errorEnd=tmp.getLineEndOffset(errorLine-1);           
                programTextPane.setCaretPosition(errorStart);
                document=(StyledDocument)programTextPane.getDocument(); 
                document.setCharacterAttributes(errorStart,errorEnd-errorStart-1,errorAttr,true);
                errorMarked=true;
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(TigerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_msgTextAreaMouseClicked

    private void programTextPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_programTextPaneFocusGained
        // TODO add your handling code here:
        if (errorMarked) {
            document.setCharacterAttributes(0,document.getLength(),normalAttr,true);
            errorMarked=false;
        }
    }//GEN-LAST:event_programTextPaneFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TigerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TigerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TigerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TigerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TigerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem analyzeItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenuItem generateItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane msgScrollPane;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JScrollPane programScrollPane;
    private javax.swing.JTextPane programTextPane;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    // End of variables declaration//GEN-END:variables
}
